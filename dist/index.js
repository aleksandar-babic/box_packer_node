const rejectPromise=(a)=>Promise.reject({message:a}),pack=({container:a,items:b})=>{let c=[];const d=b.length-1;for(let e=0;e<=d;++e){if(parseFloat(b[e].weight)>parseFloat(a.weight_limit))return rejectPromise('Item is too heavy for container');let d=!1;if(0!==c.length){const f=c.length-1;for(let g=0;g<=f;++g){if(c[g].weight+b[e].weight>a.weight_limit)continue;const f=c[g].spaces.length-1;for(let a=0;a<=f;++a){const f=place(b[e],c[g].spaces[a]);if(null===f)continue;c[g].placements.push(f),c[g].weight+=b[e].weight;const h=c[g].spaces[a];c[g].spaces.splice(a,1),c[g].spaces.push(breakUpSpace(h,f)),d=!0;break}if(d)break}if(d)continue}const f={dimensions:a.dimensions.sort().reverse(),position:[0,0,0]},g=place(b[e],f);if(null===g)return rejectPromise('Item cannot be placed in container');c.push({placements:[g],weight:b[e].weight||0,spaces:breakUpSpace(f,g)})}return Promise.resolve(c)},place=(a,b)=>{a.dimensions=a.dimensions.sort().reverse();const c=a.dimensions[0],d=a.dimensions[1],e=a.dimensions[2],f=[[c,d,e],[c,e,d],[d,c,e],[d,e,c],[e,c,d],[e,d,c]];for(let c=0;c<f.length-1;++c)if(!(f[c][0]>=b.dimensions[0]||f[c][1]>=b.dimensions[1]||f[c][2]>=b.dimensions[2]))return{dimensions:f[c],position:b.position,weight:a.weight};return null},breakUpSpace=(a,b)=>[{dimensions:[a.dimensions[0]-b.dimensions[0],a.dimensions[1],a.dimensions[2]],position:[a.position[0]+b.dimensions[0],a.position[1],a.position[2]]},{dimensions:[b.dimensions[0],a.dimensions[1]-b.dimensions[1],a.dimensions[2]],position:[a.position[0],a.position[1]+b.dimensions[1],a.position[2]]},{dimensions:[b.dimensions[0],b.dimensions[1],a.dimensions[2]-b.dimensions[2]],position:[a.position[0],a.position[1],a.position[2]+b.dimensions[2]]}];module.exports={pack,place,breakUpSpace};